<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd" >
<FBType Name="ConveyorCTLMulticast" Comment="Basic Function Block Type" >
  <Identification Standard="61499-2" />
  <VersionInfo Organization="Rockwell Automation" Version="0.2" Author="JHC" Date="2003-12-04" Remarks="Renamed for better indexing." />
  <VersionInfo Organization="Rockwell Automation" Version="0.1" Author="JHC" Date="2002-11-05" Remarks="Corrected missing ST element in Algorithm REQ." />
  <VersionInfo Organization="Rockwell Automation" Version="0.0" Author="JHC" Date="2000-05-30" />
  <CompilerInfo header="package fb.rt.cs725;" >
  </CompilerInfo>
  <InterfaceList>
    <EventInputs>
      <Event Name="INIT" Comment="Initialization Request" >
        <With Var="PE_IN" />
        <With Var="Block" />
        <With Var="Candidate" />
        <With Var="PE_OUT" />
      </Event>
      <Event Name="REQ" Comment="Normal Execution Request" >
        <With Var="PE_IN" />
        <With Var="Block" />
        <With Var="Candidate" />
        <With Var="PE_OUT" />
      </Event>
      <Event Name="CAS_STOP" >
      </Event>
      <Event Name="CAS_START" >
      </Event>
      <Event Name="PE_EVENT" >
        <With Var="PE_OUT" />
        <With Var="PE_IN" />
      </Event>
      <Event Name="IN_REPLY" >
        <With Var="IN_LAMPORT" />
        <With Var="isProc0Requested" />
        <With Var="isProc0Replied" />
      </Event>
      <Event Name="IN_REQUEST" >
        <With Var="IN_LAMPORT" />
        <With Var="isProc0Requested" />
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Name="INITO" Comment="Initialization Confirm" >
        <With Var="MotoRotate" />
        <With Var="BlockCon" />
      </Event>
      <Event Name="CNF" Comment="Execution Confirmation" >
        <With Var="MotoRotate" />
        <With Var="BlockCon" />
        <With Var="thisProcRequested" />
        <With Var="replyToProc0" />
        <With Var="OUT_LAMPORT" />
      </Event>
      <Event Name="STOP" >
      </Event>
      <Event Name="START" >
      </Event>
      <Event Name="OUT_REPLY" >
        <With Var="OUT_LAMPORT" />
        <With Var="thisProcRequested" />
        <With Var="replyToProc0" />
      </Event>
      <Event Name="OUT_REQUEST" >
        <With Var="OUT_LAMPORT" />
        <With Var="thisProcRequested" />
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Name="PE_IN" Type="BOOL" Comment="Input event qualifier" />
      <VarDeclaration Name="Block" Type="BOOL" />
      <VarDeclaration Name="Candidate" Type="BOOL" />
      <VarDeclaration Name="PE_OUT" Type="BOOL" />
      <VarDeclaration Name="IN_LAMPORT" Type="UINT" />
      <VarDeclaration Name="isProc0Requested" Type="BOOL" />
      <VarDeclaration Name="isProc0Replied" Type="BOOL" />
    </InputVars>
    <OutputVars>
      <VarDeclaration Name="MotoRotate" Type="BOOL" Comment="Output event qualifier" />
      <VarDeclaration Name="BlockCon" Type="BOOL" />
      <VarDeclaration Name="OUT_LAMPORT" Type="UINT" />
      <VarDeclaration Name="thisProcRequested" Type="BOOL" />
      <VarDeclaration Name="replyToProc0" Type="BOOL" />
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration Name="lastPE" Type="BOOL" InitialValue="1" />
      <VarDeclaration Name="lastBlock" Type="BOOL" InitialValue="0" />
      <VarDeclaration Name="lamportTime" Type="UINT" />
      <VarDeclaration Name="previousState" Type="INT" />
      <VarDeclaration Name="allReplied" Type="BOOL" />
      <VarDeclaration Name="replies" Type="BOOL" ArraySize="1" />
      <VarDeclaration Name="requests" Type="BOOL" ArraySize="1" />
      <VarDeclaration Name="I" Type="INT" />
    </InternalVars>
    <ECC >
      <ECState Name="START" Comment="Initial State" x="1627.7777" y="705.55554" >
      </ECState>
      <ECState Name="INIT" Comment="Initialization" x="1405.5555" y="111.11111" >
        <ECAction Algorithm="INIT" Output="INITO" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="REQ" Comment="Normal execution" x="677.7778" y="88.888885" >
        <ECAction Algorithm="REQ" Output="CNF" />
      </ECState>
      <ECState Name="CAS_START" x="3638.8887" y="111.11111" >
        <ECAction Algorithm="START" Output="START" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="CAS_STOP" x="2444.4443" y="111.11111" >
        <ECAction Algorithm="STOP" Output="STOP" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="WANTED" x="238.88889" y="1133.3333" >
        <ECAction Algorithm="LAMPORT_UPDATE" />
        <ECAction Algorithm="SEND_ALL_REQUESTS" />
        <ECAction Algorithm="STOP" Output="STOP" />
        <ECAction Output="CNF" />
        <ECAction Algorithm="WANTED_ALG" />
        <ECAction Output="OUT_REQUEST" />
      </ECState>
      <ECState Name="HELD" x="3311.111" y="3172.2222" >
        <ECAction Algorithm="START" Output="START" />
        <ECAction Output="CNF" />
        <ECAction Algorithm="HELD_ALG" />
      </ECState>
      <ECState Name="RELEASED" x="6516.6665" y="2772.2222" >
        <ECAction Algorithm="REPLY_ALL" Output="OUT_REPLY" />
        <ECAction Algorithm="RELEASED_ALG" />
        <ECAction Algorithm="LAMPORT_UPDATE" Output="CNF" />
      </ECState>
      <ECState Name="WANTED_PENDING" x="622.22217" y="1777.7777" >
        <ECAction Algorithm="WANTED_PENDING_ALG" Output="CNF" />
      </ECState>
      <ECState Name="NEW_REPLY" x="1922.2222" y="2866.6665" >
        <ECAction Algorithm="HANDLE_INCOMING_REPLY" />
        <ECAction Algorithm="NEW_REPLY_ALG" />
        <ECAction Algorithm="LAMPORT_UPDATE" />
      </ECState>
      <ECState Name="ADD_TO_QUEUE" x="4127.778" y="1383.3333" >
        <ECAction Algorithm="QUEUE_ALG" />
        <ECAction Algorithm="LAMPORT_UPDATE" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="IMMEDIATE_REPLY" x="3255.5554" y="927.7778" >
        <ECAction Algorithm="LAMPORT_UPDATE" Output="CNF" />
        <ECAction Algorithm="IMMEDATE_REPLY" Output="OUT_REPLY" />
        <ECAction Algorithm="LAMPORT_UPDATE" Output="CNF" />
      </ECState>
      <ECState Name="PREEMPTED_REPLY" x="1611.1111" y="2166.6665" >
        <ECAction Algorithm="IMMEDATE_REPLY" Output="OUT_REPLY" />
        <ECAction Algorithm="LAMPORT_UPDATE" />
      </ECState>
      <ECState Name="SECOND_BAG" x="5138.8887" y="4483.333" >
        <ECAction Algorithm="STOP" Output="STOP" />
        <ECAction Output="CNF" />
        <ECAction Algorithm="SECOND_BAG_ALG" />
        <ECAction Algorithm="SEND_ALL_REQUESTS" />
        <ECAction Output="OUT_REQUEST" />
      </ECState>
      <ECState Name="LEFT_CONV" x="4277.778" y="3666.6665" >
        <ECAction Algorithm="LEFT_CONV_ALG" />
      </ECState>
      <ECState Name="RELEASE_2" x="2438.889" y="4316.6665" >
        <ECAction Algorithm="REPLY_ALL" Output="OUT_REPLY" />
        <ECAction Algorithm="RELEASED_ALG" />
        <ECAction Algorithm="LAMPORT_UPDATE" />
        <ECAction Output="CNF" />
      </ECState>
      <ECTransition Source="START" Destination="INIT" Condition="INIT" x="1627.7777" y="372.2222" />
      <ECTransition Source="INIT" Destination="START" Condition="1" x="1500.0" y="366.66666" />
      <ECTransition Source="START" Destination="REQ" Condition="REQ&#38;Candidate" x="1105.5555" y="433.3333" />
      <ECTransition Source="REQ" Destination="START" Condition="1" x="1311.1111" y="344.44443" />
      <ECTransition Source="START" Destination="CAS_START" Condition="CAS_START" x="3177.7776" y="249.99998" />
      <ECTransition Source="CAS_START" Destination="START" Condition="1" x="3877.7776" y="183.33333" />
      <ECTransition Source="START" Destination="CAS_STOP" Condition="CAS_STOP" x="2111.111" y="177.77777" />
      <ECTransition Source="CAS_STOP" Destination="START" Condition="1" x="2116.6665" y="272.2222" />
      <ECTransition Source="START" Destination="WANTED" Condition="PE_EVENT&#38;!PE_IN" x="488.88885" y="644.4444" />
      <ECTransition Source="WANTED" Destination="WANTED_PENDING" Condition="1" x="411.11108" y="1422.2222" />
      <ECTransition Source="WANTED_PENDING" Destination="NEW_REPLY" Condition="IN_REPLY" x="1255.5555" y="2866.6665" />
      <ECTransition Source="NEW_REPLY" Destination="WANTED_PENDING" Condition="!allReplied" x="1405.5555" y="2750.0" />
      <ECTransition Source="NEW_REPLY" Destination="HELD" Condition="allReplied" x="2750.0" y="3616.6665" />
      <ECTransition Source="RELEASED" Destination="START" Condition="1" x="6516.6665" y="633.3333" />
      <ECTransition Source="HELD" Destination="ADD_TO_QUEUE" Condition="IN_REQUEST" x="4177.778" y="2450.0" />
      <ECTransition Source="WANTED_PENDING" Destination="ADD_TO_QUEUE" Condition="IN_REQUEST" x="1938.8888" y="1388.8888" />
      <ECTransition Source="WANTED" Destination="ADD_TO_QUEUE" Condition="IN_REQUEST" x="3038.8887" y="1238.8888" />
      <ECTransition Source="NEW_REPLY" Destination="ADD_TO_QUEUE" Condition="IN_REQUEST" x="3166.6665" y="2400.0" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="HELD" Condition="previousState = 2" x="4450.0" y="2544.4443" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="NEW_REPLY" Condition="previousState = 3" x="3405.5554" y="2472.2222" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="WANTED_PENDING" Condition="previousState = 4" x="1961.1111" y="1500.0" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="WANTED" Condition="previousState = 5" x="3005.5554" y="1083.3333" />
      <ECTransition Source="START" Destination="IMMEDIATE_REPLY" Condition="IN_REQUEST" x="2622.2222" y="822.22217" />
      <ECTransition Source="IMMEDIATE_REPLY" Destination="START" Condition="1" x="2294.4443" y="927.7778" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="PREEMPTED_REPLY" Condition="previousState = 100" x="3094.4443" y="1877.7777" />
      <ECTransition Source="PREEMPTED_REPLY" Destination="WANTED_PENDING" Condition="1" x="1161.1111" y="2072.2222" />
      <ECTransition Source="HELD" Destination="LEFT_CONV" Condition="PE_EVENT&#38;PE_IN" x="3172.2222" y="3799.9998" />
      <ECTransition Source="LEFT_CONV" Destination="RELEASED" Condition="PE_EVENT&#38;!PE_OUT" x="6516.6665" y="3666.6665" />
      <ECTransition Source="LEFT_CONV" Destination="SECOND_BAG" Condition="PE_EVENT&#38;!PE_IN" x="4288.8887" y="4200.0" />
      <ECTransition Source="SECOND_BAG" Destination="RELEASE_2" Condition="PE_EVENT&#38;!PE_OUT" x="3649.9998" y="4783.333" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="LEFT_CONV" Condition="previousState = 9" x="5222.222" y="2355.5554" />
      <ECTransition Source="LEFT_CONV" Destination="ADD_TO_QUEUE" Condition="IN_REQUEST" x="4977.7773" y="2455.5554" />
      <ECTransition Source="SECOND_BAG" Destination="ADD_TO_QUEUE" Condition="IN_REQUEST" x="5661.111" y="2116.6665" />
      <ECTransition Source="ADD_TO_QUEUE" Destination="SECOND_BAG" Condition="previousState = 8" x="5844.4443" y="1994.4443" />
      <ECTransition Source="RELEASE_2" Destination="WANTED_PENDING" Condition="1" x="733.3333" y="4211.111" />
    </ECC>
  <Algorithm Name="INIT" Comment="Initialization algorithm" >
    <ST Text="MotoRotate := TRUE;&#10;Block := FALSE;&#10;&#10;System.out.println(this + &#34; &#34; + MotoRotate);&#10;System.out.println(MotoRotate);&#10;&#10;lamportTime := 0;&#10;" />
  </Algorithm>
  <Algorithm Name="REQ" Comment="Normally executed algorithm" >
    <ST Text="//System.out.println(this +  &#34; -> Candidate&#34; + Candidate);&#10;IF Candidate THEN&#10;IF lastPE !:= PE_IN THEN&#10;IF NOT PE_IN THEN&#10;BlockCon:= TRUE;&#10;System.out.println(&#34;BlockCon = true&#34;);&#10;ELSE&#10;BlockCon:=FALSE;&#10;System.out.println(&#34;BlockCon = false&#34;);&#10;END_IF&#10;lastPE := PE_IN;&#10;END_IF&#10;IF lastBlock !:= Block THEN&#10;IF Block THEN&#10;STOP.serviceEvent(this);&#10;MotoRotate := FALSE;&#10;System.out.println(&#34;Cas Stop&#34;);&#10;ELSE&#10;START.serviceEvent(this);&#10;MotoRotate := TRUE;&#10;System.out.println(&#34;Cas Start&#34;);&#10;END_IF&#10;lastBlock := Block;&#10;END_IF&#10;END_IF&#10;" />
  </Algorithm>
  <Algorithm Name="START" >
    <ST Text="MotoRotate:=TRUE;&#10;System.out.println(this + &#34; Start &#34; + MotoRotate);&#10;&#10;System.out.println(&#34;Start &#34; + MotoRotate);&#10;" />
  </Algorithm>
  <Algorithm Name="STOP" >
    <ST Text="MotoRotate := FALSE;&#10;System.out.println(this + &#34; Stop &#34; + MotoRotate);&#10;&#10;System.out.println(&#34;Stop &#34; + MotoRotate);&#10;" />
  </Algorithm>
  <Algorithm Name="SEND_ALL_REQUESTS" >
    <ST Text="OUT_LAMPORT := lamportTime;&#10;thisProcRequested := TRUE;&#10;//System.out.println(this + &#34; :The value of thisProcRequestedis &#34; + replyToProc0);&#10;System.out.println(this + &#34; sending multicast to all peers&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="HANDLE_INCOMING_REPLY" >
    <ST Text="//first, check which processes are replying&#10;IF (isProc0Replied = TRUE) THEN&#10;    System.out.println(&#34;Reply received from proc0!&#34;);&#10;    replies[0] := TRUE;&#10;END_IF;&#10;&#10;//now, check if all replies are present&#10;allReplied := TRUE;&#10;FOR I := 0 TO 0 DO&#10;    System.out.println(&#34;Checking queued reply from process &#34; + I + &#34;:&#34; + replies[I]);&#10;    IF replies[I] = FALSE THEN&#10;        allReplied := FALSE;&#10;    END_IF;&#10;END_FOR&#10;" />
  </Algorithm>
  <Algorithm Name="REPLY_ALL" >
    <ST Text="IF requests[0] = TRUE THEN&#10;    replyToProc0 := TRUE;&#10;    System.out.println(this + &#34; sending multicast to all peers&#34;);&#10;END_IF;&#10;//System.out.println(this + &#34; requests[0] = &#34; + requests[0]);&#10;" />
  </Algorithm>
  <Algorithm Name="WANTED_PENDING_ALG" >
    <ST Text="previousState := 4;&#10;System.out.println(this + &#34; In the wanted_pending state&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="WANTED_ALG" >
    <ST Text="previousState := 5;&#10;System.out.println(this + &#34;in the wanted state&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="NEW_REPLY_ALG" >
    <ST Text="previousState := 3;&#10;System.out.println(this + &#34;In the new_reply state&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="RELEASED_ALG" >
    <ST Text="previousState := 1;&#10;System.out.println(this + &#34; In the released state&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="HELD_ALG" >
    <ST Text="previousState := 2;&#10;thisProcRequested := FALSE;&#10;replyToProc0 := FALSE;&#10;System.out.println(this + &#34; In the held state&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="QUEUE_ALG" >
    <ST Text="replyToProc0 := FALSE; //reset variables&#10;&#10;IF (isProc0Requested = TRUE) THEN&#10;    IF (IN_LAMPORT >= lamportTime) || (previousState = 2) || (previousState = 8) || (previousState = 9) THEN&#10;        System.out.println(&#34;Incoming lamport time was higher or mutex already held so it gets queued&#34;);&#10;        requests[0] := TRUE;&#10;    ELSE&#10;        System.out.println(&#34;Incoming lamport time was lower so our request gets preempted.&#34;);&#10;        previousState := 100; //mutex request preemption&#10;    END_IF;&#10;END_IF;&#10;&#10;System.out.println(this + &#34; in the queue state&#34;);&#10;" />
  </Algorithm>
  <Algorithm Name="IMMEDATE_REPLY" >
    <ST Text="//reset all&#10;replyToProc0 := FALSE;&#10;IF isProc0Requested = TRUE THEN&#10;    replyToProc0 := TRUE;&#10;END_IF;&#10;System.out.println(this + &#34; :The value of replyToProc0 is &#34; + replyToProc0);&#10;" />
  </Algorithm>
  <Algorithm Name="LAMPORT_UPDATE" >
    <ST Text="IF IN_LAMPORT >= lamportTime THEN&#10;    lamportTime := IN_LAMPORT;&#10;END_IF;&#10;lamportTime := lamportTime + 1;&#10;OUT_LAMPORT := lamportTime;&#10;System.out.println(this + &#34; lamport time updated to &#34; + lamportTime);&#10;" />
  </Algorithm>
  <Algorithm Name="LEFT_CONV_ALG" >
    <ST Text="previousState := 9;&#10;" />
  </Algorithm>
  <Algorithm Name="SECOND_BAG_ALG" >
    <ST Text="previousState := 8;&#10;System.out.println(this + &#34; in the second bag state&#34;);&#10;" />
  </Algorithm>
  </BasicFB>
</FBType>
